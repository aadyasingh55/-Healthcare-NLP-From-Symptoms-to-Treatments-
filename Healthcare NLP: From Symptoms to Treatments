{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9693441,"sourceType":"datasetVersion","datasetId":5926505}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aadyasingh55/healthcare-nlp-from-symptoms-to-treatments?scriptVersionId=203464830\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-26T09:19:57.936959Z","iopub.execute_input":"2024-10-26T09:19:57.937371Z","iopub.status.idle":"2024-10-26T09:19:59.093152Z","shell.execute_reply.started":"2024-10-26T09:19:57.937329Z","shell.execute_reply":"2024-10-26T09:19:59.091861Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üß¨ Healthcare NLP: From Symptoms to Treatments üè•\n## Using Vector Search for Efficient Symptom Analysis\n### üìÑ Introduction\nThis notebook explores a dataset containing detailed information about various medical conditions, symptoms, and recommended treatments. By leveraging vector search techniques and NLP embeddings, we can create a system that takes a list of symptoms as input and suggests relevant treatments and condition names.\n\nThis project is ideal for those interested in healthcare applications of AI and NLP, enabling us to develop interactive tools that aid in preliminary diagnosis and educational exploration of health conditions.\n\n### üìä Dataset Overview\nThe dataset used here includes:\n\nCode: Unique identifier for each medical condition.\n\nName: The medical condition's name.\n\nSymptoms: Common symptoms associated with each condition.\n\nTreatments: Recommended treatments or management options.\n\nWith over 400 unique conditions, this dataset offers a comprehensive view of health conditions and their management.\n\n### üîß Methodology\nTo build this model:\n\nData Preparation: We preprocess the symptom text to prepare for vector embeddings.\n\nEmbeddings Creation: Using SentenceTransformers, we generate embeddings for each condition's symptoms.\n\nSymptom Matching with Vector Search: Given a list of input symptoms, we compute the similarity between the input and each condition's embeddings.\n\nReturn Results: For each query, the notebook returns the most relevant conditions and their recommended treatments.\n\n### üõ†Ô∏è Requirements\nThis notebook requires:\n\npandas for data handling.\n\nsentence_transformers for embeddings.\n\nscikit-learn (optional) for additional similarity measures.\n\n### üìà Example Workflow\nInput Symptoms: Users enter symptoms they experience (e.g., \"Hoarseness, Vocal Changes\").\n\nModel Suggestion: Based on input, the model returns likely conditions and recommended treatments.\n\n### ü§ñ Use Cases\nThis notebook can be used for:\n\nMedical Education: Understand common symptoms and treatments for various conditions.\n\nHealthcare Applications: Develop tools that assist in preliminary symptom assessment.\n\nData Analysis: Analyze the relationship between symptoms and treatments.\n\n### ‚ö†Ô∏è Disclaimer\nThis tool is designed for educational purposes only and should not replace professional medical advice. Always consult a healthcare professional for diagnosis and treatment.\n","metadata":{}},{"cell_type":"code","source":"!pip install sentence-transformers\nimport pandas as pd\nfrom sentence_transformers import SentenceTransformer, util\n\n# Load the data\ndf = pd.read_csv('/kaggle/input/disease-and-symptoms/Diseases_Symptoms.csv')\n\n# Initialize a Sentence Transformer model to generate embeddings\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\n\n# Generate embeddings for each condition's symptoms\ndf['Symptom_Embedding'] = df['Symptoms'].apply(lambda x: model.encode(x))\n\n# Function to find matching condition based on input symptoms\ndef find_condition_by_symptoms(input_symptoms):\n    # Generate embedding for the input symptoms\n    input_embedding = model.encode(input_symptoms)\n    \n    # Calculate similarity scores with each condition\n    df['Similarity'] = df['Symptom_Embedding'].apply(lambda x: util.cos_sim(input_embedding, x).item())\n    \n    # Find the most similar condition\n    best_match = df.loc[df['Similarity'].idxmax()]\n    return best_match['Name'], best_match['Treatments']\n\n# Example input\ninput_symptoms = \"Sweating, Trembling, Fear of losing control\"\ncondition_name, treatments = find_condition_by_symptoms(input_symptoms)\n\nprint(\"Condition:\", condition_name)\nprint(\"Recommended Treatments:\", treatments)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-26T09:23:50.747473Z","iopub.execute_input":"2024-10-26T09:23:50.747925Z","iopub.status.idle":"2024-10-26T09:24:19.527473Z","shell.execute_reply.started":"2024-10-26T09:23:50.747875Z","shell.execute_reply":"2024-10-26T09:24:19.526269Z"},"trusted":true},"execution_count":null,"outputs":[]}]}